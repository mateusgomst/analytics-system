// <auto-generated />
using System;
using System.Text.Json;
using Analytics.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Analytics.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807185251_RecreateTablesClean")]
    partial class RecreateTablesClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Analytics.Domain.Entities.AggregatedMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<JsonDocument>("Dimensions")
                        .HasColumnType("jsonb");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_AggregatedMetrics_Date");

                    b.HasIndex("MetricName")
                        .HasDatabaseName("IX_AggregatedMetrics_MetricName");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AggregatedMetrics_TenantId");

                    b.HasIndex("MetricName", "Date")
                        .HasDatabaseName("IX_AggregatedMetrics_MetricName_Date");

                    b.HasIndex("TenantId", "Date")
                        .HasDatabaseName("IX_AggregatedMetrics_TenantId_Date");

                    b.HasIndex("TenantId", "MetricName", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_AggregatedMetrics_TenantId_MetricName_Date");

                    b.ToTable("AggregatedMetrics", null, t =>
                        {
                            t.HasCheckConstraint("CK_AggregatedMetrics_Value", "\"Value\" >= 0");
                        });
                });

            modelBuilder.Entity("Analytics.Domain.Entities.AlertRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<JsonDocument>("Condition")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NotificationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AlertRules_IsActive");

                    b.HasIndex("MetricName")
                        .HasDatabaseName("IX_AlertRules_MetricName");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_AlertRules_Name");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AlertRules_TenantId");

                    b.HasIndex("MetricName", "IsActive")
                        .HasDatabaseName("IX_AlertRules_MetricName_IsActive");

                    b.HasIndex("TenantId", "IsActive")
                        .HasDatabaseName("IX_AlertRules_TenantId_IsActive");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AlertRules_TenantId_Name");

                    b.ToTable("AlertRules", (string)null);
                });

            modelBuilder.Entity("Analytics.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<JsonDocument>("Payload")
                        .HasColumnType("jsonb");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_Events_EventType");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_Events_SessionId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Events_TenantId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_Events_Timestamp");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Events_UserId");

                    b.HasIndex("TenantId", "SessionId")
                        .HasDatabaseName("IX_Events_TenantId_SessionId");

                    b.HasIndex("TenantId", "EventType", "Timestamp")
                        .HasDatabaseName("IX_Events_TenantId_EventType_Timestamp");

                    b.HasIndex("TenantId", "UserId", "Timestamp")
                        .HasDatabaseName("IX_Events_TenantId_UserId_Timestamp");

                    b.ToTable("Events", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
